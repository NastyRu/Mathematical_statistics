function lab2()
    % Выборка объема n из генеральной совокупности Х
    X = [
 -7.50, -6.61, -7.85, -7.72, -8.96, -6.55, -7.82, -6.55, -6.87, -5.95, ...
 -5.05, -4.56, -6.14, -6.83, -6.33, -7.67, -4.65, -6.30, -8.01, -5.88, ...
 -5.38, -7.06, -6.85, -5.53, -7.83, -5.89, -7.57, -6.76, -6.02, -4.62, ...
 -8.55, -6.37, -7.52, -5.78, -6.12, -8.82, -5.14, -7.68, -6.14, -6.48, ...
 -7.14, -6.25, -7.32, -5.51, -6.97, -7.86, -7.04, -6.24, -6.41, -6.00, ...
 -7.46, -6.00, -6.06, -5.94, -5.39, -5.06, -6.91, -8.06, -7.24, -6.42, ...
 -8.73, -6.20, -7.35, -5.90, -5.02, -5.93, -7.56, -7.49, -6.26, -6.06, ...
 -7.35, -5.10, -6.52, -7.97, -5.71, -7.62, -7.33, -5.31, -6.21, -7.28, ...
 -7.99, -4.65, -7.07, -7.31, -7.72, -5.22, -7.00, -7.17, -6.64, -7.00, ...
 -6.12, -6.57, -6.07, -6.65, -7.60, -6.92, -6.78, -6.85, -7.90, -7.40, ...
 -5.32, -6.58, -6.71, -5.07, -5.80, -4.87, -5.90, -7.43, -7.03, -6.67, ...
 -7.72, -5.83, -7.49, -6.68, -6.71, -7.31, -7.83, -7.92, -5.97, -6.34, ...
 ];

    % Уровень доверия
    gamma = 0.9;
    % Объем выборки 
    n = length(X);
    % Точечная оценка матожидания
    mu = mean(X);
    % Точечная оценка дисперсии
    s2 = var(X);
    
    % Нижняя граница доверительного интервала для матожидания
    muLow = findMuLow(n, mu, s2, gamma);
    % Верхняя граница доверительного интервала для матожидания
    muHigh = findMuHigh(n, mu, s2, gamma);
    % Нижняя граница доверительного интервала для дисперсии
    s2Low = findS2Low(n, s2, gamma);
    % Верхняя граница доверительного интервала для дисперсии
    s2High = findS2High(n, s2, gamma);
    
    % Вывод полученных ранее значений
    fprintf('mu = %.3f\n', mu);
    fprintf('S2 = %.3f\n', s2);
    fprintf('muLow = %.3f\n', muLow);
    fprintf('muHigh = %.3f\n', muHigh);
    fprintf('s2Low = %.3f\n', s2Low);
    fprintf('s2High = %.3f\n', s2High);
    
    % Создание массивов точченых оценок
    muArray = zeros(1, n);
    s2Array = zeros(1, n);
    % Создание массивов границ доверительных интервалов
    muLowArray = zeros(1, n);
    muHighArray = zeros(1, n);
    s2LowArray = zeros(1, n);
    s2HighArray = zeros(1, n);
    
    % Цикл от 1 до n
    for i = 1 : n
        mu = mean(X(1:i));
        s2 = var(X(1:i));
        % Точечная оценка матожидания
        muArray(i) = mu;
        % Точечная оценка дисперсии
        s2Array(i) = s2;
        % Нижняя граница доверительного интервала для матожидания
        muLowArray(i) = findMuLow(i, mu, s2, gamma);
        % Верхняя граница доверительного интервала для матожидания
        muHighArray(i) = findMuHigh(i, mu, s2, gamma);
        % Нижняя граница доверительного интервала для дисперсии
        s2LowArray(i) = findS2Low(i, s2, gamma);
        % Верхняя граница доверительного интервала для дисперсии
        s2HighArray(i) = findS2High(i, s2, gamma);
    end
    
    % Построение графиков
    plot(1 : n, [(zeros(1, n) + mu)', muArray', muLowArray', muHighArray']);
    xlabel('n');
    ylabel('y');
    legend('$\hat \mu(\vec x_N)$', '$\hat \mu(\vec x_n)$', ...
        '$\underline{\mu}(\vec x_n)$', '$\overline{\mu}(\vec x_n)$', ...
        'Interpreter', 'latex', 'FontSize', 18);
    figure;
    plot(1 : n, [(zeros(1, n) + s2)', s2Array', s2LowArray', s2HighArray']);
    xlabel('n');
    ylabel('z');
    legend('$\hat S^2(\vec x_N)$', '$\hat S^2(\vec x_n)$', ...
        '$\underline{\sigma}^2(\vec x_n)$', '$\overline{\sigma}^2(\vec x_n)$', ...
        'Interpreter', 'latex', 'FontSize', 18);
end

% Функция поиска нижней границы доверительного интервала для матожидания
function muLow = findMuLow(n, mu, s2, gamma)
    muLow = mu - sqrt(s2) * tinv((1 + gamma) / 2, n - 1) / sqrt(n);
end

% Функция поиска верхней границы доверительного интервала для матожидания
function muHigh = findMuHigh(n, mu, s2, gamma)
    muHigh = mu + sqrt(s2) * tinv((1 + gamma) / 2, n - 1) / sqrt(n);
end

% Функция поиска нижней границы доверительного интервала для дисперсии
function s2Low = findS2Low(n, s2, gamma)
    s2Low = ((n - 1) * s2) / chi2inv((1 + gamma) / 2, n - 1);
end

% Функция поиска верхней границы доверительного интервала для дисперсии
function s2High = findS2High(n, s2, gamma)
    s2High = ((n - 1) * s2) / chi2inv((1 - gamma) / 2, n - 1);
end